{"version":3,"sources":["components/app-info/app-info.js","components/search-panel/search-panel.js","components/app-filter/app-filter.js","components/employees-list-item/employees-list-item.js","components/employees-list/employees-list.js","components/employees-add-form/employees-add-form.js","components/app/app.js","index.js"],"names":["AppInfo","employees","increased","className","SearchPanel","props","onUpdateSearchLocal","e","term","target","value","setState","onUpdateSearch","state","type","placeholder","this","onChange","Component","AppFilter","buttons","name","label","map","clazz","filter","onClick","onFilterSelect","EmployeesListItem","salary","onDelete","increase","onToggleIncrease","onToggleRise","rise","onToggleProp","classNames","defaultValue","EmployeesList","data","elements","item","id","itemProps","currentTarget","getAttribute","EmployeesAddForm","onValueChange","onSubmit","preventDefault","length","addItem","App","deleteItem","newItem","maxId","prop","searchEmp","items","toLowerCase","indexOf","filterPost","visibleData","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.677b310e.chunk.js","sourcesContent":["import \"./app-info.css\";\n\nconst AppInfo = ({ employees, increased}) => {\n    return (\n        <div className=\"app-info\">\n            <h1>Учет сотрудников в компании N</h1>\n            <h2>Общее число сотрудников: {employees}</h2>\n            <h2>Премию получат: {increased}</h2>\n        </div>\n    )\n}\n\nexport default AppInfo;","import { Component } from 'react';\n\nimport './search-panel.css';\n\nclass SearchPanel extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            term: ''\n        }\n    }\n\n    onUpdateSearchLocal = (e) => {\n        const term = e.target.value;\n        this.setState({ term: term});\n        this.props.onUpdateSearch(term)\n    }\n\n    render() {\n        return (\n            <input type=\"text\"\n                className=\"form-control search-input\"\n                placeholder=\"Найти сотрудника\"\n                value={this.state.term}\n                onChange={this.onUpdateSearchLocal}\n                />\n        )\n    }\n    }\n\nexport default SearchPanel;","import { Component } from 'react';\n\nimport \"./app-filter.css\";\n\nconst AppFilter = (props) => {\n    const buttonsData = [\n        { name: 'all', label: ' Все сотрудники'},\n        { name: 'rise', label: ' На повышение'},\n        { name: 'moreThen1000', label: ' З/П больше 1000$'},\n    ];\n\n    const buttons = buttonsData.map(({name, label}) => {\n        // true либо false будет\n        const active = props.filter === name;\n        const clazz = active ? 'btn-light' : 'btn-outline-light'\n\n        return (\n            <button type=\"button\"\n                className={`btn ${clazz}`}\n                key={name}\n                onClick={() => props.onFilterSelect(name)}\n                >\n                {label}\n            </button>\n        )\n    })\n\n    return (\n        <div className=\"btn-group\">\n            {buttons}\n        </div>\n    )\n}\n\nexport default AppFilter;","\nimport './employees-list-item.css';\n\nconst EmployeesListItem = (props) => {\n\n    const { name, salary, onDelete, onToggleIncrease, onToggleRise, increase, rise, onToggleProp } = props;\n\n    let classNames = \"list-group-item d-flex justify-content-between\";\n    if (increase) {\n        classNames += \" increase\"\n    }\n    if (rise) {\n        classNames += \" like\"\n    }\n\n    return (\n        <li className={classNames}>\n            {/* <span onClick={onToggleRise} className=\"list-group-item-label\">{name}</span> */}\n            <span onClick={onToggleProp} className=\"list-group-item-label\"\n            data-toggle=\"rise\">{name}</span>\n            <input type=\"text\" className=\"list-group-item-input\" defaultValue={salary + '$'} />\n            <div className='d-flex justify-content-center align-items-center'>\n                <button\n                    type=\"button\"\n                    className=\"btn-cookie btn-sm \"\n                    // onClick={onToggleIncrease}\n                    onClick={onToggleProp}\n                    data-toggle=\"increase\"\n                >\n                    <i className=\"fas fa-cookie\"></i>\n                </button>\n\n                <button type=\"button\"\n                    className=\"btn-trash btn-sm \"\n                    onClick={onDelete}\n                >\n                    <i className=\"fas fa-trash\"></i>\n                </button>\n                <i className=\"fas fa-star\"></i>\n            </div>\n        </li>\n    )\n\n\n}\n\nexport default EmployeesListItem;","import EmployeesListItem from \"../employees-list-item/employees-list-item\";\n\nimport './employees-list.css';\n\nconst EmployeesList = ({ data, onDelete, onToggleRise, onToggleIncrease, onToggleProp }) => {\n\n    // Перебор массива и возврат компонента\n    const elements = data.map(item => {\n        const { id, ...itemProps } = item\n        // item элемент массива - объект с свойствами name, salary, id, increase\n        return (\n            // <EmployeesListItem name={item.name} salary={item.salary} />\n            // Сокращеная передача пропсов, разворачивание свойств объекта\n            <EmployeesListItem key={id} {...itemProps} onDelete={() => onDelete(id)} onToggleIncrease={() => onToggleIncrease(id)} onToggleRise={() => onToggleRise(id)} onToggleProp={(e) => onToggleProp(id, e.currentTarget.getAttribute('data-toggle'))}/>\n        )\n    });\n\n    return (\n        <ul className=\"app-list list-group\">\n            {/* Вывод массива компонентов на страницу */}\n            {elements}\n        </ul>\n    )\n}\n\nexport default EmployeesList;","import { Component } from 'react';\n\nimport './employees-add-form.css';\n\nclass EmployeesAddForm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            name: '',\n            salary: ''\n        }\n    }\n\n    // Получение значения из инпутов\n    onValueChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    // Добавление нового элемента и обновление state\n    onSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.name.length < 3 || !this.state.salary) return;\n        this.props.addItem(this.state.name, this.state.salary);\n        this.setState({\n            name: '',\n            salary: ''\n        })\n    }\n\n    render() {\n        const { name, salary } = this.state;\n\n        return (\n            <div className=\"app-add-form\">\n                <h3>Добавьте нового сотрудника</h3>\n                <form\n                    className=\"add-form d-flex\"\n                    onSubmit={this.onSubmit}\n                    >\n                    <input type=\"text\"\n                        className=\"form-control new-post-label\"\n                        placeholder=\"Как его зовут?\"\n                        onChange={this.onValueChange}\n                        name=\"name\"\n                        value={name}\n                        />\n                    <input type=\"number\"\n                        className=\"form-control new-post-label\"\n                        placeholder=\"З/П в $?\"\n                        onChange={this.onValueChange}\n                        name=\"salary\"\n                        value={salary}\n                        />\n\n                    <button type=\"submit\"\n                        className=\"btn btn-outline-light\"\n                        >Добавить</button>\n                </form>\n            </div>\n        )\n    }\n}\n\nexport default EmployeesAddForm;","import { Component } from 'react';\n\nimport AppInfo from '../app-info/app-info';\nimport SearchPanel from '../search-panel/search-panel';\nimport AppFilter from '../app-filter/app-filter';\nimport EmployeesList from '../employees-list/employees-list';\nimport EmployeesAddForm from '../employees-add-form/employees-add-form';\n\nimport './app.css';\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            data: [\n                { name: 'John Smith', salary: '1000', increase: false, rise: true, id: 1 },\n                { name: 'Alex Minik.', salary: '3000', increase: true, rise: false, id: 2 },\n                { name: 'Carl With.', salary: '5000', increase: false, rise: false, id: 3 },\n            ], \n            term: '',\n            filter: 'all'\n        }\n        this.maxId = 4;\n    }\n\n    // Удаление элемента списка по клику на кнопку удалить\n    deleteItem = (id) => {\n        // 1 вариант \n        // this.setState(({data}) => {\n        //     // Нахождение индекса\n        //     const index = data.findIndex(elem => elem.id === id);\n        //     // удалить объект который нашли из state\n        //     const before = data.slice(0, index)\n        //     const after = data.slice(index + 1)\n        //     const newArr = [...before, ...after]\n        //     return {\n        //         data: newArr\n        //     }\n        // })\n        \n        // 2 вариант\n        this.setState(({ data }) => {\n            return {\n                data: data.filter(item => item.id !== id)\n            }\n        })\n    }\n\n    // Добавление елемента списка \n    addItem = (name, salary) => {\n        const newItem = {\n            name,\n            salary,\n            increase: false,\n            rise: false,\n            id: this.maxId++\n        }\n        this.setState(({ data }) => {\n            const newArr = [...data, newItem];\n            return {\n                data: newArr\n            }\n        });\n    }\n\n    // Кнопка с печенькой, переключение состояния\n    onToggleIncrease = (id) => {\n        // 1 вариант\n        // this.setState(({data}) => {\n        //     const index = data.findIndex(elem => elem.id === id);\n        //     const old = data[index]\n        //     const newItem = {...old, increase: !old.increase}\n        //     const newArr = [...data.slice(0, index), newItem, ...data.slice(index + 1)]\n\n        //     return {\n        //         data: newArr\n        //     }\n        // })\n\n        // 2 вариант\n        this.setState(({ data }) => ({\n            data: data.map(item => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        increase: !item.increase\n                    }\n                }\n                return item\n            })\n        }))\n    }\n\n    onToggleRise = (id) => {\n        this.setState(({ data }) => ({\n            data: data.map(item => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        rise: !item.rise\n                    }\n                }\n                return item\n            })\n        }))\n    }\n\n    // 1 метод вместо двух onToggleRise, onToggleIncrease\n    onToggleProp = (id, prop) => {\n        this.setState(({ data }) => ({\n            data: data.map(item => {\n                if (item.id === id) {\n                    return {\n                        ...item,\n                        [prop]: !item[prop]\n                    }\n                }\n                return item\n            })\n        }))\n    }\n\n    // Метод для поиска\n    searchEmp = (items, term) => {\n        if (term.length === 0) {\n            return items\n        }\n\n        return items.filter(item => {\n            return item.name.toLowerCase().indexOf(term) > -1\n        })\n    }\n\n    onUpdateSearch = (term) => {\n        this.setState({\n            term: term.toLowerCase()\n        })\n    }\n\n    // Фильтр\n    filterPost = (items, filter) => {\n        switch (filter) {\n            case 'rise':\n                return items.filter(item => item.rise)\n            case 'moreThen1000':\n                return items.filter(item => item.salary > 1000)\n            default: \n                return items\n        }\n    }\n\n    // Метод выбора фильтра\n    onFilterSelect = (filter) => {\n        this.setState(({ filter }))\n    }\n\n\n    render() {\n        const {data, term, filter} = this.state;\n        const employees = this.state.data.length;\n        const increased = this.state.data.filter(item => item.increase).length;\n        // const visibleData = this.searchEmp(data, term)\n        const visibleData = this.filterPost(this.searchEmp(data, term), filter)\n        \n\n\n        return (\n            <div className=\"app\">\n                <AppInfo employees={employees} increased={increased}/>\n\n                <div className=\"search-panel\">\n                    <SearchPanel onUpdateSearch={this.onUpdateSearch}/>\n                    <AppFilter filter={filter} onFilterSelect={this.onFilterSelect}/>\n                </div>\n\n                {/* Передача массива в компонент */}\n                <EmployeesList data={visibleData} onDelete={this.deleteItem} onToggleIncrease={this.onToggleIncrease} onToggleRise={this.onToggleRise} onToggleProp={this.onToggleProp}/>\n                <EmployeesAddForm addItem={this.addItem} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app/app';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}